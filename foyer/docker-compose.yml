version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ''
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: foyer
    ports:
      - "3306:3306"
    networks:
      - my_network
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  springboot:
    image: montahajaballah/montahabenjaballah_bugbusters_foyer:latest
    container_name: springboot
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/foyer?createDatabaseIfNotExist=true&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ''
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SERVER_PORT: 8089
      SERVER_SERVLET_CONTEXT_PATH: /foyer
    ports:
      - "8089:8089"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - my_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/foyer/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - /mnt/c/Users/tahab/OneDrive/Desktop/4TWIN4-BugBusters-Foyer/foyer/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - my_network
    restart: always

  mysql-exporter:
    image: prom/mysqld-exporter:v0.15.1
    container_name: mysql-exporter
    environment:
      - DATA_SOURCE_NAME=exporter:exporter_password@(mysql:3306)/foyer
    ports:
      - "9104:9104"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - my_network
    restart: always

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - my_network
    restart: always

  sonarqube-db:
    image: postgres:13
    container_name: sonarqube-db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    networks:
      - my_network
    volumes:
      - sonarqube_db_data:/var/lib/postgresql/data
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: ["postgres", "-c", "hba_file=/etc/postgresql/pg_hba.conf"]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5

  sonarqube:
    image: sonarqube:8.9.7-community
    container_name: sonarqube
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_JVM_OPTS: -Xmx2g -Xms2g
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      sonarqube-db:
        condition: service_healthy
    restart: always
    networks:
      - my_network

  nexus:
    image: sonatype/nexus3
    container_name: nexus
    ports:
      - "8081:8081"
    volumes:
      - nexus-data:/nexus-data
    restart: always
    networks:
      - my_network

networks:
  my_network:
    driver: bridge

volumes:
  mysql-data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  sonarqube_db_data:
  nexus-data:
  prometheus-data: